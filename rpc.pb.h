// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace raft_rpc {
class AppendEntryRpc;
class AppendEntryRpcDefaultTypeInternal;
extern AppendEntryRpcDefaultTypeInternal _AppendEntryRpc_default_instance_;
class RequestVoteRpc;
class RequestVoteRpcDefaultTypeInternal;
extern RequestVoteRpcDefaultTypeInternal _RequestVoteRpc_default_instance_;
class Resp_AppendEntryRPC;
class Resp_AppendEntryRPCDefaultTypeInternal;
extern Resp_AppendEntryRPCDefaultTypeInternal _Resp_AppendEntryRPC_default_instance_;
class Resp_RequestVoteRpc;
class Resp_RequestVoteRpcDefaultTypeInternal;
extern Resp_RequestVoteRpcDefaultTypeInternal _Resp_RequestVoteRpc_default_instance_;
class rpc_Entry;
class rpc_EntryDefaultTypeInternal;
extern rpc_EntryDefaultTypeInternal _rpc_Entry_default_instance_;
}  // namespace raft_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::raft_rpc::AppendEntryRpc* Arena::CreateMaybeMessage<::raft_rpc::AppendEntryRpc>(Arena*);
template<> ::raft_rpc::RequestVoteRpc* Arena::CreateMaybeMessage<::raft_rpc::RequestVoteRpc>(Arena*);
template<> ::raft_rpc::Resp_AppendEntryRPC* Arena::CreateMaybeMessage<::raft_rpc::Resp_AppendEntryRPC>(Arena*);
template<> ::raft_rpc::Resp_RequestVoteRpc* Arena::CreateMaybeMessage<::raft_rpc::Resp_RequestVoteRpc>(Arena*);
template<> ::raft_rpc::rpc_Entry* Arena::CreateMaybeMessage<::raft_rpc::rpc_Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft_rpc {

// ===================================================================

class rpc_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_rpc.rpc_Entry) */ {
 public:
  rpc_Entry();
  virtual ~rpc_Entry();

  rpc_Entry(const rpc_Entry& from);
  rpc_Entry(rpc_Entry&& from) noexcept
    : rpc_Entry() {
    *this = ::std::move(from);
  }

  inline rpc_Entry& operator=(const rpc_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline rpc_Entry& operator=(rpc_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rpc_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpc_Entry* internal_default_instance() {
    return reinterpret_cast<const rpc_Entry*>(
               &_rpc_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rpc_Entry& a, rpc_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(rpc_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rpc_Entry* New() const final {
    return CreateMaybeMessage<rpc_Entry>(nullptr);
  }

  rpc_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rpc_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rpc_Entry& from);
  void MergeFrom(const rpc_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpc_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_rpc.rpc_Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kTermFieldNumber = 1,
    kLsnFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lsn = 3;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::int32 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_rpc.rpc_Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntryRpc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_rpc.AppendEntryRpc) */ {
 public:
  AppendEntryRpc();
  virtual ~AppendEntryRpc();

  AppendEntryRpc(const AppendEntryRpc& from);
  AppendEntryRpc(AppendEntryRpc&& from) noexcept
    : AppendEntryRpc() {
    *this = ::std::move(from);
  }

  inline AppendEntryRpc& operator=(const AppendEntryRpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntryRpc& operator=(AppendEntryRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntryRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntryRpc* internal_default_instance() {
    return reinterpret_cast<const AppendEntryRpc*>(
               &_AppendEntryRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendEntryRpc& a, AppendEntryRpc& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntryRpc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntryRpc* New() const final {
    return CreateMaybeMessage<AppendEntryRpc>(nullptr);
  }

  AppendEntryRpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntryRpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntryRpc& from);
  void MergeFrom(const AppendEntryRpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntryRpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_rpc.AppendEntryRpc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 6,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
    kPrelogTermFieldNumber = 3,
    kCommitIndexFieldNumber = 5,
    kLsnFieldNumber = 7,
  };
  // repeated .raft_rpc.rpc_Entry entry = 6;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::raft_rpc::rpc_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_rpc::rpc_Entry >*
      mutable_entry();
  private:
  const ::raft_rpc::rpc_Entry& _internal_entry(int index) const;
  ::raft_rpc::rpc_Entry* _internal_add_entry();
  public:
  const ::raft_rpc::rpc_Entry& entry(int index) const;
  ::raft_rpc::rpc_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_rpc::rpc_Entry >&
      entry() const;

  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prelog_term = 3;
  void clear_prelog_term();
  ::PROTOBUF_NAMESPACE_ID::int32 prelog_term() const;
  void set_prelog_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prelog_term() const;
  void _internal_set_prelog_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 commit_index = 5;
  void clear_commit_index();
  ::PROTOBUF_NAMESPACE_ID::int32 commit_index() const;
  void set_commit_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commit_index() const;
  void _internal_set_commit_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lsn = 7;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::int32 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_rpc.AppendEntryRpc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_rpc::rpc_Entry > entry_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 prelog_term_;
  ::PROTOBUF_NAMESPACE_ID::int32 commit_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Resp_AppendEntryRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_rpc.Resp_AppendEntryRPC) */ {
 public:
  Resp_AppendEntryRPC();
  virtual ~Resp_AppendEntryRPC();

  Resp_AppendEntryRPC(const Resp_AppendEntryRPC& from);
  Resp_AppendEntryRPC(Resp_AppendEntryRPC&& from) noexcept
    : Resp_AppendEntryRPC() {
    *this = ::std::move(from);
  }

  inline Resp_AppendEntryRPC& operator=(const Resp_AppendEntryRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resp_AppendEntryRPC& operator=(Resp_AppendEntryRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resp_AppendEntryRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resp_AppendEntryRPC* internal_default_instance() {
    return reinterpret_cast<const Resp_AppendEntryRPC*>(
               &_Resp_AppendEntryRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Resp_AppendEntryRPC& a, Resp_AppendEntryRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(Resp_AppendEntryRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resp_AppendEntryRPC* New() const final {
    return CreateMaybeMessage<Resp_AppendEntryRPC>(nullptr);
  }

  Resp_AppendEntryRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resp_AppendEntryRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resp_AppendEntryRPC& from);
  void MergeFrom(const Resp_AppendEntryRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resp_AppendEntryRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_rpc.Resp_AppendEntryRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kTermFieldNumber = 2,
    kLsnFieldNumber = 3,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // int32 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lsn = 3;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::int32 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_rpc.Resp_AppendEntryRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ok_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRpc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_rpc.RequestVoteRpc) */ {
 public:
  RequestVoteRpc();
  virtual ~RequestVoteRpc();

  RequestVoteRpc(const RequestVoteRpc& from);
  RequestVoteRpc(RequestVoteRpc&& from) noexcept
    : RequestVoteRpc() {
    *this = ::std::move(from);
  }

  inline RequestVoteRpc& operator=(const RequestVoteRpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRpc& operator=(RequestVoteRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRpc* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRpc*>(
               &_RequestVoteRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestVoteRpc& a, RequestVoteRpc& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRpc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRpc* New() const final {
    return CreateMaybeMessage<RequestVoteRpc>(nullptr);
  }

  RequestVoteRpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRpc& from);
  void MergeFrom(const RequestVoteRpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_rpc.RequestVoteRpc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
    kLsnFieldNumber = 3,
  };
  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lsn = 3;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::int32 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_rpc.RequestVoteRpc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Resp_RequestVoteRpc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_rpc.Resp_RequestVoteRpc) */ {
 public:
  Resp_RequestVoteRpc();
  virtual ~Resp_RequestVoteRpc();

  Resp_RequestVoteRpc(const Resp_RequestVoteRpc& from);
  Resp_RequestVoteRpc(Resp_RequestVoteRpc&& from) noexcept
    : Resp_RequestVoteRpc() {
    *this = ::std::move(from);
  }

  inline Resp_RequestVoteRpc& operator=(const Resp_RequestVoteRpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resp_RequestVoteRpc& operator=(Resp_RequestVoteRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resp_RequestVoteRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resp_RequestVoteRpc* internal_default_instance() {
    return reinterpret_cast<const Resp_RequestVoteRpc*>(
               &_Resp_RequestVoteRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Resp_RequestVoteRpc& a, Resp_RequestVoteRpc& b) {
    a.Swap(&b);
  }
  inline void Swap(Resp_RequestVoteRpc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resp_RequestVoteRpc* New() const final {
    return CreateMaybeMessage<Resp_RequestVoteRpc>(nullptr);
  }

  Resp_RequestVoteRpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resp_RequestVoteRpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resp_RequestVoteRpc& from);
  void MergeFrom(const Resp_RequestVoteRpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resp_RequestVoteRpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_rpc.Resp_RequestVoteRpc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kTermFieldNumber = 2,
    kLsnFieldNumber = 3,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // int32 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lsn = 3;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::int32 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_rpc.Resp_RequestVoteRpc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ok_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rpc_Entry

// int32 term = 1;
inline void rpc_Entry::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_Entry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_Entry::term() const {
  // @@protoc_insertion_point(field_get:raft_rpc.rpc_Entry.term)
  return _internal_term();
}
inline void rpc_Entry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void rpc_Entry::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft_rpc.rpc_Entry.term)
}

// string msg = 2;
inline void rpc_Entry::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& rpc_Entry::msg() const {
  // @@protoc_insertion_point(field_get:raft_rpc.rpc_Entry.msg)
  return _internal_msg();
}
inline void rpc_Entry::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:raft_rpc.rpc_Entry.msg)
}
inline std::string* rpc_Entry::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:raft_rpc.rpc_Entry.msg)
  return _internal_mutable_msg();
}
inline const std::string& rpc_Entry::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void rpc_Entry::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rpc_Entry::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_rpc.rpc_Entry.msg)
}
inline void rpc_Entry::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_rpc.rpc_Entry.msg)
}
inline void rpc_Entry::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_rpc.rpc_Entry.msg)
}
inline std::string* rpc_Entry::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rpc_Entry::release_msg() {
  // @@protoc_insertion_point(field_release:raft_rpc.rpc_Entry.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_Entry::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:raft_rpc.rpc_Entry.msg)
}

// int32 lsn = 3;
inline void rpc_Entry::clear_lsn() {
  lsn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_Entry::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rpc_Entry::lsn() const {
  // @@protoc_insertion_point(field_get:raft_rpc.rpc_Entry.lsn)
  return _internal_lsn();
}
inline void rpc_Entry::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lsn_ = value;
}
inline void rpc_Entry::set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:raft_rpc.rpc_Entry.lsn)
}

// -------------------------------------------------------------------

// AppendEntryRpc

// int32 term = 1;
inline void AppendEntryRpc::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::term() const {
  // @@protoc_insertion_point(field_get:raft_rpc.AppendEntryRpc.term)
  return _internal_term();
}
inline void AppendEntryRpc::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void AppendEntryRpc::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft_rpc.AppendEntryRpc.term)
}

// int32 index = 2;
inline void AppendEntryRpc::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::index() const {
  // @@protoc_insertion_point(field_get:raft_rpc.AppendEntryRpc.index)
  return _internal_index();
}
inline void AppendEntryRpc::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void AppendEntryRpc::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft_rpc.AppendEntryRpc.index)
}

// int32 prelog_term = 3;
inline void AppendEntryRpc::clear_prelog_term() {
  prelog_term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::_internal_prelog_term() const {
  return prelog_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::prelog_term() const {
  // @@protoc_insertion_point(field_get:raft_rpc.AppendEntryRpc.prelog_term)
  return _internal_prelog_term();
}
inline void AppendEntryRpc::_internal_set_prelog_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prelog_term_ = value;
}
inline void AppendEntryRpc::set_prelog_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prelog_term(value);
  // @@protoc_insertion_point(field_set:raft_rpc.AppendEntryRpc.prelog_term)
}

// int32 commit_index = 5;
inline void AppendEntryRpc::clear_commit_index() {
  commit_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::_internal_commit_index() const {
  return commit_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::commit_index() const {
  // @@protoc_insertion_point(field_get:raft_rpc.AppendEntryRpc.commit_index)
  return _internal_commit_index();
}
inline void AppendEntryRpc::_internal_set_commit_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  commit_index_ = value;
}
inline void AppendEntryRpc::set_commit_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commit_index(value);
  // @@protoc_insertion_point(field_set:raft_rpc.AppendEntryRpc.commit_index)
}

// repeated .raft_rpc.rpc_Entry entry = 6;
inline int AppendEntryRpc::_internal_entry_size() const {
  return entry_.size();
}
inline int AppendEntryRpc::entry_size() const {
  return _internal_entry_size();
}
inline void AppendEntryRpc::clear_entry() {
  entry_.Clear();
}
inline ::raft_rpc::rpc_Entry* AppendEntryRpc::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:raft_rpc.AppendEntryRpc.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_rpc::rpc_Entry >*
AppendEntryRpc::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:raft_rpc.AppendEntryRpc.entry)
  return &entry_;
}
inline const ::raft_rpc::rpc_Entry& AppendEntryRpc::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::raft_rpc::rpc_Entry& AppendEntryRpc::entry(int index) const {
  // @@protoc_insertion_point(field_get:raft_rpc.AppendEntryRpc.entry)
  return _internal_entry(index);
}
inline ::raft_rpc::rpc_Entry* AppendEntryRpc::_internal_add_entry() {
  return entry_.Add();
}
inline ::raft_rpc::rpc_Entry* AppendEntryRpc::add_entry() {
  // @@protoc_insertion_point(field_add:raft_rpc.AppendEntryRpc.entry)
  return _internal_add_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_rpc::rpc_Entry >&
AppendEntryRpc::entry() const {
  // @@protoc_insertion_point(field_list:raft_rpc.AppendEntryRpc.entry)
  return entry_;
}

// int32 lsn = 7;
inline void AppendEntryRpc::clear_lsn() {
  lsn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntryRpc::lsn() const {
  // @@protoc_insertion_point(field_get:raft_rpc.AppendEntryRpc.lsn)
  return _internal_lsn();
}
inline void AppendEntryRpc::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lsn_ = value;
}
inline void AppendEntryRpc::set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:raft_rpc.AppendEntryRpc.lsn)
}

// -------------------------------------------------------------------

// Resp_AppendEntryRPC

// bool ok = 1;
inline void Resp_AppendEntryRPC::clear_ok() {
  ok_ = false;
}
inline bool Resp_AppendEntryRPC::_internal_ok() const {
  return ok_;
}
inline bool Resp_AppendEntryRPC::ok() const {
  // @@protoc_insertion_point(field_get:raft_rpc.Resp_AppendEntryRPC.ok)
  return _internal_ok();
}
inline void Resp_AppendEntryRPC::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Resp_AppendEntryRPC::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:raft_rpc.Resp_AppendEntryRPC.ok)
}

// int32 term = 2;
inline void Resp_AppendEntryRPC::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_AppendEntryRPC::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_AppendEntryRPC::term() const {
  // @@protoc_insertion_point(field_get:raft_rpc.Resp_AppendEntryRPC.term)
  return _internal_term();
}
inline void Resp_AppendEntryRPC::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void Resp_AppendEntryRPC::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft_rpc.Resp_AppendEntryRPC.term)
}

// int32 lsn = 3;
inline void Resp_AppendEntryRPC::clear_lsn() {
  lsn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_AppendEntryRPC::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_AppendEntryRPC::lsn() const {
  // @@protoc_insertion_point(field_get:raft_rpc.Resp_AppendEntryRPC.lsn)
  return _internal_lsn();
}
inline void Resp_AppendEntryRPC::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lsn_ = value;
}
inline void Resp_AppendEntryRPC::set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:raft_rpc.Resp_AppendEntryRPC.lsn)
}

// -------------------------------------------------------------------

// RequestVoteRpc

// int32 term = 1;
inline void RequestVoteRpc::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteRpc::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteRpc::term() const {
  // @@protoc_insertion_point(field_get:raft_rpc.RequestVoteRpc.term)
  return _internal_term();
}
inline void RequestVoteRpc::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void RequestVoteRpc::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft_rpc.RequestVoteRpc.term)
}

// int32 index = 2;
inline void RequestVoteRpc::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteRpc::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteRpc::index() const {
  // @@protoc_insertion_point(field_get:raft_rpc.RequestVoteRpc.index)
  return _internal_index();
}
inline void RequestVoteRpc::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void RequestVoteRpc::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft_rpc.RequestVoteRpc.index)
}

// int32 lsn = 3;
inline void RequestVoteRpc::clear_lsn() {
  lsn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteRpc::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteRpc::lsn() const {
  // @@protoc_insertion_point(field_get:raft_rpc.RequestVoteRpc.lsn)
  return _internal_lsn();
}
inline void RequestVoteRpc::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lsn_ = value;
}
inline void RequestVoteRpc::set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:raft_rpc.RequestVoteRpc.lsn)
}

// -------------------------------------------------------------------

// Resp_RequestVoteRpc

// bool ok = 1;
inline void Resp_RequestVoteRpc::clear_ok() {
  ok_ = false;
}
inline bool Resp_RequestVoteRpc::_internal_ok() const {
  return ok_;
}
inline bool Resp_RequestVoteRpc::ok() const {
  // @@protoc_insertion_point(field_get:raft_rpc.Resp_RequestVoteRpc.ok)
  return _internal_ok();
}
inline void Resp_RequestVoteRpc::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Resp_RequestVoteRpc::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:raft_rpc.Resp_RequestVoteRpc.ok)
}

// int32 term = 2;
inline void Resp_RequestVoteRpc::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_RequestVoteRpc::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_RequestVoteRpc::term() const {
  // @@protoc_insertion_point(field_get:raft_rpc.Resp_RequestVoteRpc.term)
  return _internal_term();
}
inline void Resp_RequestVoteRpc::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void Resp_RequestVoteRpc::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft_rpc.Resp_RequestVoteRpc.term)
}

// int32 lsn = 3;
inline void Resp_RequestVoteRpc::clear_lsn() {
  lsn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_RequestVoteRpc::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resp_RequestVoteRpc::lsn() const {
  // @@protoc_insertion_point(field_get:raft_rpc.Resp_RequestVoteRpc.lsn)
  return _internal_lsn();
}
inline void Resp_RequestVoteRpc::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lsn_ = value;
}
inline void Resp_RequestVoteRpc::set_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:raft_rpc.Resp_RequestVoteRpc.lsn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
