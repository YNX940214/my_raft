// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: easy_state_machine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_easy_5fstate_5fmachine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_easy_5fstate_5fmachine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_easy_5fstate_5fmachine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_easy_5fstate_5fmachine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_easy_5fstate_5fmachine_2eproto;
namespace easy_state_machine {
class apply_call;
class apply_callDefaultTypeInternal;
extern apply_callDefaultTypeInternal _apply_call_default_instance_;
class query_call;
class query_callDefaultTypeInternal;
extern query_callDefaultTypeInternal _query_call_default_instance_;
class resp_apply;
class resp_applyDefaultTypeInternal;
extern resp_applyDefaultTypeInternal _resp_apply_default_instance_;
class resp_query;
class resp_queryDefaultTypeInternal;
extern resp_queryDefaultTypeInternal _resp_query_default_instance_;
}  // namespace easy_state_machine
PROTOBUF_NAMESPACE_OPEN
template<> ::easy_state_machine::apply_call* Arena::CreateMaybeMessage<::easy_state_machine::apply_call>(Arena*);
template<> ::easy_state_machine::query_call* Arena::CreateMaybeMessage<::easy_state_machine::query_call>(Arena*);
template<> ::easy_state_machine::resp_apply* Arena::CreateMaybeMessage<::easy_state_machine::resp_apply>(Arena*);
template<> ::easy_state_machine::resp_query* Arena::CreateMaybeMessage<::easy_state_machine::resp_query>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace easy_state_machine {

// ===================================================================

class apply_call :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:easy_state_machine.apply_call) */ {
 public:
  apply_call();
  virtual ~apply_call();

  apply_call(const apply_call& from);
  apply_call(apply_call&& from) noexcept
    : apply_call() {
    *this = ::std::move(from);
  }

  inline apply_call& operator=(const apply_call& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_call& operator=(apply_call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const apply_call* internal_default_instance() {
    return reinterpret_cast<const apply_call*>(
               &_apply_call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(apply_call& a, apply_call& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_call* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_call* New() const final {
    return CreateMaybeMessage<apply_call>(nullptr);
  }

  apply_call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_call>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_call& from);
  void MergeFrom(const apply_call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "easy_state_machine.apply_call";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_easy_5fstate_5fmachine_2eproto);
    return ::descriptor_table_easy_5fstate_5fmachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kVFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 v = 2;
  void clear_v();
  ::PROTOBUF_NAMESPACE_ID::int32 v() const;
  void set_v(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v() const;
  void _internal_set_v(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:easy_state_machine.apply_call)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_easy_5fstate_5fmachine_2eproto;
};
// -------------------------------------------------------------------

class query_call :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:easy_state_machine.query_call) */ {
 public:
  query_call();
  virtual ~query_call();

  query_call(const query_call& from);
  query_call(query_call&& from) noexcept
    : query_call() {
    *this = ::std::move(from);
  }

  inline query_call& operator=(const query_call& from) {
    CopyFrom(from);
    return *this;
  }
  inline query_call& operator=(query_call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const query_call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const query_call* internal_default_instance() {
    return reinterpret_cast<const query_call*>(
               &_query_call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(query_call& a, query_call& b) {
    a.Swap(&b);
  }
  inline void Swap(query_call* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline query_call* New() const final {
    return CreateMaybeMessage<query_call>(nullptr);
  }

  query_call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<query_call>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const query_call& from);
  void MergeFrom(const query_call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "easy_state_machine.query_call";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_easy_5fstate_5fmachine_2eproto);
    return ::descriptor_table_easy_5fstate_5fmachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:easy_state_machine.query_call)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_easy_5fstate_5fmachine_2eproto;
};
// -------------------------------------------------------------------

class resp_apply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:easy_state_machine.resp_apply) */ {
 public:
  resp_apply();
  virtual ~resp_apply();

  resp_apply(const resp_apply& from);
  resp_apply(resp_apply&& from) noexcept
    : resp_apply() {
    *this = ::std::move(from);
  }

  inline resp_apply& operator=(const resp_apply& from) {
    CopyFrom(from);
    return *this;
  }
  inline resp_apply& operator=(resp_apply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const resp_apply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resp_apply* internal_default_instance() {
    return reinterpret_cast<const resp_apply*>(
               &_resp_apply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(resp_apply& a, resp_apply& b) {
    a.Swap(&b);
  }
  inline void Swap(resp_apply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline resp_apply* New() const final {
    return CreateMaybeMessage<resp_apply>(nullptr);
  }

  resp_apply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<resp_apply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const resp_apply& from);
  void MergeFrom(const resp_apply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resp_apply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "easy_state_machine.resp_apply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_easy_5fstate_5fmachine_2eproto);
    return ::descriptor_table_easy_5fstate_5fmachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:easy_state_machine.resp_apply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_easy_5fstate_5fmachine_2eproto;
};
// -------------------------------------------------------------------

class resp_query :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:easy_state_machine.resp_query) */ {
 public:
  resp_query();
  virtual ~resp_query();

  resp_query(const resp_query& from);
  resp_query(resp_query&& from) noexcept
    : resp_query() {
    *this = ::std::move(from);
  }

  inline resp_query& operator=(const resp_query& from) {
    CopyFrom(from);
    return *this;
  }
  inline resp_query& operator=(resp_query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const resp_query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resp_query* internal_default_instance() {
    return reinterpret_cast<const resp_query*>(
               &_resp_query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(resp_query& a, resp_query& b) {
    a.Swap(&b);
  }
  inline void Swap(resp_query* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline resp_query* New() const final {
    return CreateMaybeMessage<resp_query>(nullptr);
  }

  resp_query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<resp_query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const resp_query& from);
  void MergeFrom(const resp_query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resp_query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "easy_state_machine.resp_query";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_easy_5fstate_5fmachine_2eproto);
    return ::descriptor_table_easy_5fstate_5fmachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kVFieldNumber = 2,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // int32 v = 2;
  void clear_v();
  ::PROTOBUF_NAMESPACE_ID::int32 v() const;
  void set_v(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v() const;
  void _internal_set_v(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:easy_state_machine.resp_query)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ok_;
  ::PROTOBUF_NAMESPACE_ID::int32 v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_easy_5fstate_5fmachine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// apply_call

// string key = 1;
inline void apply_call::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& apply_call::key() const {
  // @@protoc_insertion_point(field_get:easy_state_machine.apply_call.key)
  return _internal_key();
}
inline void apply_call::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:easy_state_machine.apply_call.key)
}
inline std::string* apply_call::mutable_key() {
  // @@protoc_insertion_point(field_mutable:easy_state_machine.apply_call.key)
  return _internal_mutable_key();
}
inline const std::string& apply_call::_internal_key() const {
  return key_.GetNoArena();
}
inline void apply_call::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void apply_call::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:easy_state_machine.apply_call.key)
}
inline void apply_call::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:easy_state_machine.apply_call.key)
}
inline void apply_call::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:easy_state_machine.apply_call.key)
}
inline std::string* apply_call::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* apply_call::release_key() {
  // @@protoc_insertion_point(field_release:easy_state_machine.apply_call.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void apply_call::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:easy_state_machine.apply_call.key)
}

// int32 v = 2;
inline void apply_call::clear_v() {
  v_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 apply_call::_internal_v() const {
  return v_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 apply_call::v() const {
  // @@protoc_insertion_point(field_get:easy_state_machine.apply_call.v)
  return _internal_v();
}
inline void apply_call::_internal_set_v(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v_ = value;
}
inline void apply_call::set_v(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:easy_state_machine.apply_call.v)
}

// -------------------------------------------------------------------

// query_call

// string key = 1;
inline void query_call::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& query_call::key() const {
  // @@protoc_insertion_point(field_get:easy_state_machine.query_call.key)
  return _internal_key();
}
inline void query_call::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:easy_state_machine.query_call.key)
}
inline std::string* query_call::mutable_key() {
  // @@protoc_insertion_point(field_mutable:easy_state_machine.query_call.key)
  return _internal_mutable_key();
}
inline const std::string& query_call::_internal_key() const {
  return key_.GetNoArena();
}
inline void query_call::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void query_call::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:easy_state_machine.query_call.key)
}
inline void query_call::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:easy_state_machine.query_call.key)
}
inline void query_call::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:easy_state_machine.query_call.key)
}
inline std::string* query_call::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* query_call::release_key() {
  // @@protoc_insertion_point(field_release:easy_state_machine.query_call.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void query_call::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:easy_state_machine.query_call.key)
}

// -------------------------------------------------------------------

// resp_apply

// bool ok = 1;
inline void resp_apply::clear_ok() {
  ok_ = false;
}
inline bool resp_apply::_internal_ok() const {
  return ok_;
}
inline bool resp_apply::ok() const {
  // @@protoc_insertion_point(field_get:easy_state_machine.resp_apply.ok)
  return _internal_ok();
}
inline void resp_apply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void resp_apply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:easy_state_machine.resp_apply.ok)
}

// -------------------------------------------------------------------

// resp_query

// bool ok = 1;
inline void resp_query::clear_ok() {
  ok_ = false;
}
inline bool resp_query::_internal_ok() const {
  return ok_;
}
inline bool resp_query::ok() const {
  // @@protoc_insertion_point(field_get:easy_state_machine.resp_query.ok)
  return _internal_ok();
}
inline void resp_query::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void resp_query::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:easy_state_machine.resp_query.ok)
}

// int32 v = 2;
inline void resp_query::clear_v() {
  v_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 resp_query::_internal_v() const {
  return v_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 resp_query::v() const {
  // @@protoc_insertion_point(field_get:easy_state_machine.resp_query.v)
  return _internal_v();
}
inline void resp_query::_internal_set_v(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v_ = value;
}
inline void resp_query::set_v(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:easy_state_machine.resp_query.v)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace easy_state_machine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_easy_5fstate_5fmachine_2eproto
