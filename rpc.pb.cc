// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rpc_Entry_rpc_2eproto;
namespace raft_rpc {
class rpc_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rpc_Entry> _instance;
} _rpc_Entry_default_instance_;
class AppendEntryRpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntryRpc> _instance;
} _AppendEntryRpc_default_instance_;
class Resp_AppendEntryRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resp_AppendEntryRPC> _instance;
} _Resp_AppendEntryRPC_default_instance_;
class RequestVoteRpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteRpc> _instance;
} _RequestVoteRpc_default_instance_;
class Resp_RequestVoteRpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resp_RequestVoteRpc> _instance;
} _Resp_RequestVoteRpc_default_instance_;
}  // namespace raft_rpc
static void InitDefaultsscc_info_AppendEntryRpc_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_AppendEntryRpc_default_instance_;
    new (ptr) ::raft_rpc::AppendEntryRpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::AppendEntryRpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendEntryRpc_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendEntryRpc_rpc_2eproto}, {
      &scc_info_rpc_Entry_rpc_2eproto.base,}};

static void InitDefaultsscc_info_RequestVoteRpc_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_RequestVoteRpc_default_instance_;
    new (ptr) ::raft_rpc::RequestVoteRpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::RequestVoteRpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteRpc_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteRpc_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Resp_AppendEntryRPC_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_Resp_AppendEntryRPC_default_instance_;
    new (ptr) ::raft_rpc::Resp_AppendEntryRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::Resp_AppendEntryRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Resp_AppendEntryRPC_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Resp_AppendEntryRPC_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Resp_RequestVoteRpc_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_Resp_RequestVoteRpc_default_instance_;
    new (ptr) ::raft_rpc::Resp_RequestVoteRpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::Resp_RequestVoteRpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Resp_RequestVoteRpc_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Resp_RequestVoteRpc_rpc_2eproto}, {}};

static void InitDefaultsscc_info_rpc_Entry_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_rpc_Entry_default_instance_;
    new (ptr) ::raft_rpc::rpc_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::rpc_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rpc_Entry_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rpc_Entry_rpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::rpc_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::rpc_Entry, term_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::rpc_Entry, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, term_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, index_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, prelog_term_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, prelog_index_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, commit_index_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::AppendEntryRpc, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::Resp_AppendEntryRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::Resp_AppendEntryRPC, ok_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::Resp_AppendEntryRPC, term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::RequestVoteRpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::RequestVoteRpc, term_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::RequestVoteRpc, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::Resp_RequestVoteRpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::Resp_RequestVoteRpc, ok_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::Resp_RequestVoteRpc, term_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft_rpc::rpc_Entry)},
  { 7, -1, sizeof(::raft_rpc::AppendEntryRpc)},
  { 18, -1, sizeof(::raft_rpc::Resp_AppendEntryRPC)},
  { 25, -1, sizeof(::raft_rpc::RequestVoteRpc)},
  { 32, -1, sizeof(::raft_rpc::Resp_RequestVoteRpc)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_rpc::_rpc_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_rpc::_AppendEntryRpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_rpc::_Resp_AppendEntryRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_rpc::_RequestVoteRpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_rpc::_Resp_RequestVoteRpc_default_instance_),
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\010raft_rpc\"&\n\trpc_Entry\022\014\n\004te"
  "rm\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\222\001\n\016AppendEntryRpc"
  "\022\014\n\004term\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\023\n\013prelog_"
  "term\030\003 \001(\005\022\024\n\014prelog_index\030\004 \001(\005\022\024\n\014comm"
  "it_index\030\005 \001(\005\022\"\n\005entry\030\006 \003(\0132\023.raft_rpc"
  ".rpc_Entry\"/\n\023Resp_AppendEntryRPC\022\n\n\002ok\030"
  "\001 \001(\010\022\014\n\004term\030\002 \001(\005\"-\n\016RequestVoteRpc\022\014\n"
  "\004term\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\"/\n\023Resp_Reque"
  "stVoteRpc\022\n\n\002ok\030\001 \001(\010\022\014\n\004term\030\002 \001(\005b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_2eproto_sccs[5] = {
  &scc_info_AppendEntryRpc_rpc_2eproto.base,
  &scc_info_RequestVoteRpc_rpc_2eproto.base,
  &scc_info_Resp_AppendEntryRPC_rpc_2eproto.base,
  &scc_info_Resp_RequestVoteRpc_rpc_2eproto.base,
  &scc_info_rpc_Entry_rpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2eproto_once;
static bool descriptor_table_rpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto = {
  &descriptor_table_rpc_2eproto_initialized, descriptor_table_protodef_rpc_2eproto, "rpc.proto", 363,
  &descriptor_table_rpc_2eproto_once, descriptor_table_rpc_2eproto_sccs, descriptor_table_rpc_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
  file_level_metadata_rpc_2eproto, 5, file_level_enum_descriptors_rpc_2eproto, file_level_service_descriptors_rpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_2eproto), true);
namespace raft_rpc {

// ===================================================================

void rpc_Entry::InitAsDefaultInstance() {
}
class rpc_Entry::_Internal {
 public:
};

rpc_Entry::rpc_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.rpc_Entry)
}
rpc_Entry::rpc_Entry(const rpc_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:raft_rpc.rpc_Entry)
}

void rpc_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rpc_Entry_rpc_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  term_ = 0;
}

rpc_Entry::~rpc_Entry() {
  // @@protoc_insertion_point(destructor:raft_rpc.rpc_Entry)
  SharedDtor();
}

void rpc_Entry::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rpc_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_Entry& rpc_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rpc_Entry_rpc_2eproto.base);
  return *internal_default_instance();
}


void rpc_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.rpc_Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  term_ = 0;
  _internal_metadata_.Clear();
}

const char* rpc_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft_rpc.rpc_Entry.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rpc_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.rpc_Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_rpc.rpc_Entry.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.rpc_Entry)
  return target;
}

size_t rpc_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.rpc_Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.rpc_Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rpc_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.rpc_Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.rpc_Entry)
    MergeFrom(*source);
  }
}

void rpc_Entry::MergeFrom(const rpc_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.rpc_Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
}

void rpc_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.rpc_Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_Entry::CopyFrom(const rpc_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.rpc_Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_Entry::IsInitialized() const {
  return true;
}

void rpc_Entry::InternalSwap(rpc_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rpc_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntryRpc::InitAsDefaultInstance() {
}
class AppendEntryRpc::_Internal {
 public:
};

AppendEntryRpc::AppendEntryRpc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.AppendEntryRpc)
}
AppendEntryRpc::AppendEntryRpc(const AppendEntryRpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(commit_index_));
  // @@protoc_insertion_point(copy_constructor:raft_rpc.AppendEntryRpc)
}

void AppendEntryRpc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntryRpc_rpc_2eproto.base);
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commit_index_));
}

AppendEntryRpc::~AppendEntryRpc() {
  // @@protoc_insertion_point(destructor:raft_rpc.AppendEntryRpc)
  SharedDtor();
}

void AppendEntryRpc::SharedDtor() {
}

void AppendEntryRpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntryRpc& AppendEntryRpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntryRpc_rpc_2eproto.base);
  return *internal_default_instance();
}


void AppendEntryRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.AppendEntryRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commit_index_));
  _internal_metadata_.Clear();
}

const char* AppendEntryRpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prelog_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prelog_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prelog_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prelog_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 commit_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          commit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raft_rpc.rpc_Entry entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntryRpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.AppendEntryRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 prelog_term = 3;
  if (this->prelog_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prelog_term(), target);
  }

  // int32 prelog_index = 4;
  if (this->prelog_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prelog_index(), target);
  }

  // int32 commit_index = 5;
  if (this->commit_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_commit_index(), target);
  }

  // repeated .raft_rpc.rpc_Entry entry = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.AppendEntryRpc)
  return target;
}

size_t AppendEntryRpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.AppendEntryRpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_rpc.rpc_Entry entry = 6;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 prelog_term = 3;
  if (this->prelog_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prelog_term());
  }

  // int32 prelog_index = 4;
  if (this->prelog_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prelog_index());
  }

  // int32 commit_index = 5;
  if (this->commit_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_commit_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntryRpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.AppendEntryRpc)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntryRpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntryRpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.AppendEntryRpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.AppendEntryRpc)
    MergeFrom(*source);
  }
}

void AppendEntryRpc::MergeFrom(const AppendEntryRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.AppendEntryRpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.prelog_term() != 0) {
    _internal_set_prelog_term(from._internal_prelog_term());
  }
  if (from.prelog_index() != 0) {
    _internal_set_prelog_index(from._internal_prelog_index());
  }
  if (from.commit_index() != 0) {
    _internal_set_commit_index(from._internal_commit_index());
  }
}

void AppendEntryRpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.AppendEntryRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntryRpc::CopyFrom(const AppendEntryRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.AppendEntryRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntryRpc::IsInitialized() const {
  return true;
}

void AppendEntryRpc::InternalSwap(AppendEntryRpc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
  swap(term_, other->term_);
  swap(index_, other->index_);
  swap(prelog_term_, other->prelog_term_);
  swap(prelog_index_, other->prelog_index_);
  swap(commit_index_, other->commit_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntryRpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resp_AppendEntryRPC::InitAsDefaultInstance() {
}
class Resp_AppendEntryRPC::_Internal {
 public:
};

Resp_AppendEntryRPC::Resp_AppendEntryRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.Resp_AppendEntryRPC)
}
Resp_AppendEntryRPC::Resp_AppendEntryRPC(const Resp_AppendEntryRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ok_, &from.ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&ok_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:raft_rpc.Resp_AppendEntryRPC)
}

void Resp_AppendEntryRPC::SharedCtor() {
  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(term_));
}

Resp_AppendEntryRPC::~Resp_AppendEntryRPC() {
  // @@protoc_insertion_point(destructor:raft_rpc.Resp_AppendEntryRPC)
  SharedDtor();
}

void Resp_AppendEntryRPC::SharedDtor() {
}

void Resp_AppendEntryRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resp_AppendEntryRPC& Resp_AppendEntryRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resp_AppendEntryRPC_rpc_2eproto.base);
  return *internal_default_instance();
}


void Resp_AppendEntryRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.Resp_AppendEntryRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

const char* Resp_AppendEntryRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resp_AppendEntryRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.Resp_AppendEntryRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // int32 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.Resp_AppendEntryRPC)
  return target;
}

size_t Resp_AppendEntryRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.Resp_AppendEntryRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  // int32 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resp_AppendEntryRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.Resp_AppendEntryRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const Resp_AppendEntryRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resp_AppendEntryRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.Resp_AppendEntryRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.Resp_AppendEntryRPC)
    MergeFrom(*source);
  }
}

void Resp_AppendEntryRPC::MergeFrom(const Resp_AppendEntryRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.Resp_AppendEntryRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
}

void Resp_AppendEntryRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.Resp_AppendEntryRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resp_AppendEntryRPC::CopyFrom(const Resp_AppendEntryRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.Resp_AppendEntryRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resp_AppendEntryRPC::IsInitialized() const {
  return true;
}

void Resp_AppendEntryRPC::InternalSwap(Resp_AppendEntryRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ok_, other->ok_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resp_AppendEntryRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestVoteRpc::InitAsDefaultInstance() {
}
class RequestVoteRpc::_Internal {
 public:
};

RequestVoteRpc::RequestVoteRpc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.RequestVoteRpc)
}
RequestVoteRpc::RequestVoteRpc(const RequestVoteRpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:raft_rpc.RequestVoteRpc)
}

void RequestVoteRpc::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(index_));
}

RequestVoteRpc::~RequestVoteRpc() {
  // @@protoc_insertion_point(destructor:raft_rpc.RequestVoteRpc)
  SharedDtor();
}

void RequestVoteRpc::SharedDtor() {
}

void RequestVoteRpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteRpc& RequestVoteRpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteRpc_rpc_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.RequestVoteRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* RequestVoteRpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteRpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.RequestVoteRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.RequestVoteRpc)
  return target;
}

size_t RequestVoteRpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.RequestVoteRpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteRpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.RequestVoteRpc)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteRpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteRpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.RequestVoteRpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.RequestVoteRpc)
    MergeFrom(*source);
  }
}

void RequestVoteRpc::MergeFrom(const RequestVoteRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.RequestVoteRpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void RequestVoteRpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.RequestVoteRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRpc::CopyFrom(const RequestVoteRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.RequestVoteRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRpc::IsInitialized() const {
  return true;
}

void RequestVoteRpc::InternalSwap(RequestVoteRpc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteRpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resp_RequestVoteRpc::InitAsDefaultInstance() {
}
class Resp_RequestVoteRpc::_Internal {
 public:
};

Resp_RequestVoteRpc::Resp_RequestVoteRpc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.Resp_RequestVoteRpc)
}
Resp_RequestVoteRpc::Resp_RequestVoteRpc(const Resp_RequestVoteRpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ok_, &from.ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&ok_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:raft_rpc.Resp_RequestVoteRpc)
}

void Resp_RequestVoteRpc::SharedCtor() {
  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(term_));
}

Resp_RequestVoteRpc::~Resp_RequestVoteRpc() {
  // @@protoc_insertion_point(destructor:raft_rpc.Resp_RequestVoteRpc)
  SharedDtor();
}

void Resp_RequestVoteRpc::SharedDtor() {
}

void Resp_RequestVoteRpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resp_RequestVoteRpc& Resp_RequestVoteRpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resp_RequestVoteRpc_rpc_2eproto.base);
  return *internal_default_instance();
}


void Resp_RequestVoteRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.Resp_RequestVoteRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

const char* Resp_RequestVoteRpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resp_RequestVoteRpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.Resp_RequestVoteRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // int32 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.Resp_RequestVoteRpc)
  return target;
}

size_t Resp_RequestVoteRpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.Resp_RequestVoteRpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  // int32 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resp_RequestVoteRpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.Resp_RequestVoteRpc)
  GOOGLE_DCHECK_NE(&from, this);
  const Resp_RequestVoteRpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resp_RequestVoteRpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.Resp_RequestVoteRpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.Resp_RequestVoteRpc)
    MergeFrom(*source);
  }
}

void Resp_RequestVoteRpc::MergeFrom(const Resp_RequestVoteRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.Resp_RequestVoteRpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
}

void Resp_RequestVoteRpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.Resp_RequestVoteRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resp_RequestVoteRpc::CopyFrom(const Resp_RequestVoteRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.Resp_RequestVoteRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resp_RequestVoteRpc::IsInitialized() const {
  return true;
}

void Resp_RequestVoteRpc::InternalSwap(Resp_RequestVoteRpc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ok_, other->ok_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resp_RequestVoteRpc::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raft_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft_rpc::rpc_Entry* Arena::CreateMaybeMessage< ::raft_rpc::rpc_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::rpc_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::AppendEntryRpc* Arena::CreateMaybeMessage< ::raft_rpc::AppendEntryRpc >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::AppendEntryRpc >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::Resp_AppendEntryRPC* Arena::CreateMaybeMessage< ::raft_rpc::Resp_AppendEntryRPC >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::Resp_AppendEntryRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::RequestVoteRpc* Arena::CreateMaybeMessage< ::raft_rpc::RequestVoteRpc >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::RequestVoteRpc >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::Resp_RequestVoteRpc* Arena::CreateMaybeMessage< ::raft_rpc::Resp_RequestVoteRpc >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::Resp_RequestVoteRpc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
